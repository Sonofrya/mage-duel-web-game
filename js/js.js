document.addEventListener('DOMContentLoaded', function() {
    const charIcons = document.querySelectorAll('.char-icon');
    const pickedCharIcon = document.querySelector('.picked-char-icon');
    const charName = document.querySelector('.name');
    const charInfo = document.querySelector('.info');
    const analogInfo = document.querySelector('.analog-info');
    const roomsContainer = document.getElementById('roomsContainer');
    const inviteBox = document.getElementById('invite-box');
    const inviteOverlay = document.getElementById('invite-overlay');
    const yesBtn = document.querySelector('.yes');
    const noBtn = document.querySelector('.no');
    const inviterElement = document.querySelector('.inviter');
    const userNameElement = document.getElementById('userName');
    const logoutBtn = document.getElementById('logoutBtn');

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserInfo();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    logoutBtn.addEventListener('click', function() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            logout();
        }
    });
  
    inviteBox.style.display = 'none';
    inviteOverlay.style.display = 'none';

    charIcons.forEach(icon => {
        icon.addEventListener('click', function() {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            charIcons.forEach(i => i.classList.remove('selected'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
            this.classList.add('selected');
            
            const name = this.getAttribute('data-name');
            const info = this.getAttribute('data-info');
            const image = this.getAttribute('data-image');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            pickedCharIcon.style.opacity = '0.5';
            setTimeout(() => {
                charName.textContent = name;
                charInfo.textContent = info;
                analogInfo.textContent = info;
                pickedCharIcon.style.backgroundImage = `url('${image}')`;
                pickedCharIcon.style.opacity = '1';
            }, 150);

            fetch('update_character.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `character=${image}`
            })
            .then(response => response.text())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));
        });
    });

    document.getElementById('createRoomButton').addEventListener('click', function() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = 'scale(1)';
        }, 100);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const originalText = this.textContent;
        this.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
        this.disabled = true;
        
        fetch('create_room.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                this.style.background = 'linear-gradient(135deg, #8CEC7F, #51E03F)';
                this.textContent = '–£—Å–ø–µ—à–Ω–æ!';
                setTimeout(() => {
                    window.location.href = `wait.html?room_id=${data.room_id}`;
                }, 500);
            } else {
                this.textContent = originalText;
                this.disabled = false;
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            this.textContent = originalText;
            this.disabled = false;
        });
    });

    function loadRooms() {
        fetch('get_rooms.php')
        .then(response => response.json())
        .then(data => {
            const existingRooms = new Set();
            roomsContainer.innerHTML = '';
            
            if (data.rooms.length === 0) {
                const noRoomsDiv = document.createElement('div');
                noRoomsDiv.classList.add('no-rooms');
                noRoomsDiv.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #888;">
                        <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</h3>
                        <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã!</p>
                    </div>
                `;
                roomsContainer.appendChild(noRoomsDiv);
                return;
            }
            
            data.rooms.forEach((room, index) => {
                if (!existingRooms.has(room.room_id)) {
                    existingRooms.add(room.room_id);
                    const roomDiv = document.createElement('div');
                    roomDiv.classList.add('room');
                    
                    const playerStatus = room.player_count === 2 ? '–ü–æ–ª–Ω–∞—è' : '–°–≤–æ–±–æ–¥–Ω–æ';
                    const statusColor = room.player_count === 2 ? '#E42828' : '#51E03F';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã
                    const currentUser = getCookie('login');
                    const isCreator = room.creator === currentUser;
                    
                    roomDiv.innerHTML = `
                        <div class="room-info">
                            <p class="room-creator">üë§ ${room.creator}</p>
                            <p class="room-id">üè† –ö–æ–º–Ω–∞—Ç–∞ ${room.room_id}</p>
                            <p class="room-players">üë• ${room.player_count}/2 –∏–≥—Ä–æ–∫–æ–≤</p>
                            <p style="color: ${statusColor}; font-size: 1vw;">${playerStatus}</p>
                        </div>
                        <div class="room-buttons">
                            <button type="button" class="come_in" data-room-id="${room.room_id}" ${room.player_count === 2 ? 'disabled' : ''}>
                                ${room.player_count === 2 ? '–ü–æ–ª–Ω–∞—è' : '–í–æ–π—Ç–∏'}
                            </button>
                            ${isCreator ? `<button type="button" class="delete-room" data-room-id="${room.room_id}" title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É">üóëÔ∏è</button>` : ''}
                        </div>
                    `;
                    roomsContainer.appendChild(roomDiv);
                }
            });

            document.querySelectorAll('.come_in').forEach(button => {
                button.addEventListener('click', function() {
                    const roomId = this.getAttribute('data-room-id');
                    fetch(`check_player_in_room.php?room_id=${roomId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.player_count < 2 && !data.is_player_in_room) {
                            fetch('join_room.php', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: `room_id=${roomId}`
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    window.location.href = `wait.html?room_id=${roomId}`;
                                } else {
                                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É: ' + data.message);
                                }
                            })
                            .catch(error => console.error('Error:', error));
                        } else if (data.is_player_in_room) {
                            alert('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.');
                        } else {
                            alert('–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.');
                        }
                    })
                    .catch(error => console.error('Error:', error));
                });
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
            document.querySelectorAll('.delete-room').forEach(button => {
                button.addEventListener('click', function() {
                    const roomId = this.getAttribute('data-room-id');
                    
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        this.textContent = '‚è≥';
                        this.disabled = true;
                        
                        fetch('delete_room.php', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: `room_id=${roomId}`
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                                this.textContent = '‚úÖ';
                                this.style.background = 'linear-gradient(135deg, #8CEC7F, #51E03F)';
                                
                                setTimeout(() => {
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
                                    loadRooms();
                                }, 1000);
                            } else {
                                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: ' + data.message);
                                this.textContent = 'üóëÔ∏è';
                                this.disabled = false;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã');
                            this.textContent = 'üóëÔ∏è';
                            this.disabled = false;
                        });
                    }
                });
            });
        })
        .catch(error => console.error('Error:', error));
    }

    function checkInvitations() {
        fetch('check_invitations.php')
        .then(response => response.json())
        .then(data => {
            if (data.success && data.inviter_login && data.room_id) {
                console.log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data);
                inviterElement.textContent = data.inviter_login;
                inviteBox.setAttribute('data-room-id', data.room_id);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                inviteOverlay.style.display = 'block';
                inviteBox.style.display = 'block';
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    inviteOverlay.classList.add('show');
                    inviteBox.classList.add('show');
                }, 50);
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
                if (inviteBox.classList.contains('show')) {
                    inviteBox.classList.remove('show');
                    inviteOverlay.classList.remove('show');
                    setTimeout(() => {
                        inviteOverlay.style.display = 'none';
                    }, 300);
                }
            }
        })
        .catch(error => {
            console.error('Error checking invitations:', error);
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (inviteBox.classList.contains('show')) {
                inviteBox.classList.remove('show');
                inviteOverlay.classList.remove('show');
                setTimeout(() => {
                    inviteOverlay.style.display = 'none';
                }, 300);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–µ—Å—Ç–∏–∫–∞ —É–±—Ä–∞–Ω

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    inviteOverlay.addEventListener('click', function() {
        inviteBox.classList.remove('show');
        inviteOverlay.classList.remove('show');
        setTimeout(() => {
            inviteBox.style.display = 'none';
            inviteOverlay.style.display = 'none';
        }, 300);
    });

    yesBtn.addEventListener('click', function() {
        const roomId = inviteBox.getAttribute('data-room-id');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        yesBtn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            yesBtn.style.transform = 'scale(1)';
        }, 150);
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ –ë–î
        fetch('delete_invitation.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `room_id=${roomId}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // –ó–∞—Ç–µ–º –≤—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É
                return fetch('join_room.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `room_id=${roomId}`
                });
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ' + data.message);
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                inviteBox.classList.remove('show');
                inviteOverlay.classList.remove('show');
                setTimeout(() => {
                    window.location.href = `wait.html?room_id=${roomId}`;
                }, 300);
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        });
    });

    noBtn.addEventListener('click', function() {
        const roomId = inviteBox.getAttribute('data-room-id');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        noBtn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            noBtn.style.transform = 'scale(1)';
        }, 150);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ –ë–î
        fetch('delete_invitation.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `room_id=${roomId}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        inviteBox.classList.remove('show');
        inviteOverlay.classList.remove('show');
        setTimeout(() => {
            inviteBox.style.display = 'none';
            inviteOverlay.style.display = 'none';
        }, 300);
    });

    loadRooms();
    setInterval(loadRooms, 5000);
    setInterval(checkInvitations, 5000);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    function loadUserInfo() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ cookie
        const loginCookie = getCookie('login');
        if (loginCookie) {
            userNameElement.textContent = loginCookie;
            userNameElement.style.opacity = '0';
            setTimeout(() => {
                userNameElement.style.opacity = '1';
            }, 200);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç cookie, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetch('get_user_info.php')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.login) {
                    userNameElement.textContent = data.login;
                    userNameElement.style.opacity = '0';
                    setTimeout(() => {
                        userNameElement.style.opacity = '1';
                    }, 200);
                } else {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                    window.location.href = 'login.html';
                }
            })
            .catch(error => {
                console.error('Error loading user info:', error);
                window.location.href = 'login.html';
            });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
    function logout() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        logoutBtn.style.transform = 'scale(0.95)';
        logoutBtn.textContent = '–í—ã—Ö–æ–¥...';
        logoutBtn.disabled = true;

        fetch('logout.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                logoutBtn.style.background = 'linear-gradient(135deg, #8CEC7F, #51E03F)';
                logoutBtn.textContent = '–£—Å–ø–µ—à–Ω–æ!';
                
                setTimeout(() => {
                    window.location.href = 'login.html';
                }, 1000);
            } else {
                logoutBtn.textContent = '–í—ã–π—Ç–∏';
                logoutBtn.disabled = false;
                logoutBtn.style.transform = 'scale(1)';
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            logoutBtn.textContent = '–í—ã–π—Ç–∏';
            logoutBtn.disabled = false;
            logoutBtn.style.transform = 'scale(1)';
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }
});